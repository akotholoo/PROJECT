https://github.com/akotholoo/PROJECT
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <ctime>
#include <algorithm>

using namespace std;

class Book {
public:
    int bookID;
    string title;
    string author;
    string genre;
    bool status; // true if available, false if borrowed

    Book(int id, const string& t, const string& a, const string& g)
        : bookID(id), title(t), author(a), genre(g), status(true) {}
};

class Member {
public:
    int memberID;
    string name;
    string address;
    string phoneNumber;

    Member(int id, const string& n, const string& addr, const string& phone)
        : memberID(id), name(n), address(addr), phoneNumber(phone) {}
};

class Transaction {
public:
    int transactionID;
    int memberID;
    int bookID;
    string borrowDate;
    string returnDate;

    Transaction(int tID, int mID, int bID, const string& bDate)
        : transactionID(tID), memberID(mID), bookID(bID), borrowDate(bDate), returnDate("") {}
};

class LibraryManagementSystem {
private:
    vector<Book> books;
    vector<Member> members;
    vector<Transaction> transactions;
    int bookCounter = 0;
    int memberCounter = 0;
    int transactionCounter = 0;

    void loadBooks() {
        ifstream file("books.txt");
        if (file.is_open()) {
            int id;
            string title, author, genre;
            bool status;
            while (file >> id >> ws && getline(file, title) && getline(file, author) && getline(file, genre) >> status) {
                books.emplace_back(id, title, author, genre);
            }
            file.close();
        }
    }

    void loadMembers() {
        ifstream file("members.txt");
        if (file.is_open()) {
            int id;
            string name, address, phone;
            while (file >> id >> ws && getline(file, name) && getline(file, address) && getline(file, phone)) {
                members.emplace_back(id, name, address, phone);
            }
            file.close();
        }
    }

    void loadTransactions() {
        ifstream file("transactions.txt");
        if (file.is_open()) {
            int tID, mID, bID;
            string bDate, rDate;
            while (file >> tID >> mID >> bID >> ws && getline(file, bDate) && getline(file, rDate)) {
                transactions.emplace_back(tID, mID, bID, bDate);
                if (tID > transactionCounter) transactionCounter = tID;
            }
            file.close();
        }
    }

    void saveBooks() {
        ofstream file("books.txt");
        for (const auto& book : books) {
            file << book.bookID << endl << book.title << endl << book.author << endl << book.genre << endl << book.status << endl;
        }
        file.close();
    }

    void saveMembers() {
        ofstream file("members.txt");
        for (const auto& member : members) {
            file << member.memberID << endl << member.name << endl << member.address << endl << member.phoneNumber << endl;
        }
        file.close();
    }

    void saveTransactions() {
        ofstream file("transactions.txt");
        for (const auto& transaction : transactions) {
            file << transaction.transactionID << " " << transaction.memberID << " " << transaction.bookID << endl 
                 << transaction.borrowDate << endl << transaction.returnDate << endl;
        }
        file.close();
    }

public:
    LibraryManagementSystem() {
        loadBooks();
        loadMembers();
        loadTransactions();
    }

    void addBook() {
        string title, author, genre;
        bookCounter++;
        cout << "Enter title: ";
        cin.ignore();
        getline(cin, title);
        cout << "Enter author: ";
        getline(cin, author);
        cout << "Enter genre: ";
        getline(cin, genre);
        books.emplace_back(bookCounter, title, author, genre);
        saveBooks();
        cout << "Book added successfully!" << endl;
    }

    void editBook() {
        int bookID;
        cout << "Enter book ID to edit: ";
        cin >> bookID;
        auto it = find_if(books.begin(), books.end(), [bookID](const Book& b) { return b.bookID == bookID; });
        if (it != books.end()) {
            string title, author, genre;
 cout << "Enter new title (leave blank to keep current): ";
            cin.ignore();
            getline(cin, title);
            cout << "Enter new author (leave blank to keep current): ";
            getline(cin, author);
            cout << "Enter new genre (leave blank to keep current): ";
            getline(cin, genre);
            if (!title.empty()) it->title = title;
            if (!author.empty()) it->author = author;
            if (!genre.empty()) it->genre = genre;
            saveBooks();
            cout << "Book updated successfully!" << endl;
        } else {
            cout << "Book not found!" << endl;
        }
    }

    void deleteBook() {
        int bookID;
        cout << "Enter book ID to delete: ";
        cin >> bookID;
        auto it = remove_if(books.begin(), books.end(), [bookID](const Book& b) { return b.bookID == bookID; });
        if (it != books.end()) {
            books.erase(it, books.end());
            saveBooks();
            cout << "Book deleted successfully!" << endl;
        } else {
            cout << "Book not found!" << endl;
        }
    }

    void viewAllBooks() {
        cout << "All Books:" << endl;
        for (const auto& book : books) {
            cout << "ID: " << book.bookID << ", Title: " << book.title << ", Author: " << book.author 
                 << ", Genre: " << book.genre << ", Status: " << (book.status ? "Available" : "Borrowed") << endl;
        }
    }

    void addMember() {
        string name, address, phone;
        memberCounter++;
        cout << "Enter name: ";
        cin.ignore();
        getline(cin, name);
        cout << "Enter address: ";
        getline(cin, address);
        cout << "Enter phone number: ";
        getline(cin, phone);
        members.emplace_back(memberCounter, name, address, phone);
        saveMembers();
        cout << "Member added successfully!" << endl;
    }

    void editMember() {
        int memberID;
        cout << "Enter member ID to edit: ";
        cin >> memberID;
        auto it = find_if(members.begin(), members.end(), [memberID](const Member& m) { return m.memberID == memberID; });
        if (it != members.end()) {
            string name, address, phone;
            cout << "Enter new name (leave blank to keep current): ";
            cin.ignore();
            getline(cin, name);
            cout << "Enter new address (leave blank to keep current): ";
            getline(cin, address);
            cout << "Enter new phone number (leave blank to keep current): ";
            getline(cin, phone);
            if (!name.empty()) it->name = name;
            if (!address.empty()) it->address = address;
            if (!phone.empty()) it->phoneNumber = phone;
            saveMembers();
            cout << "Member updated successfully!" << endl;
        } else {
            cout << "Member not found!" << endl;
        }
    }

    void deleteMember() {
        int memberID;
        cout << "Enter member ID to delete: ";
        cin >> memberID;
        auto it = remove_if(members.begin(), members.end(), [memberID](const Member& m) { return m.memberID == memberID; });
        if (it != members.end()) {
            members.erase(it, members.end());
            saveMembers();
            cout << "Member deleted successfully!" << endl;
        } else {
            cout << "Member not found!" << endl;
        }
    }

    void viewAllMembers() {
        cout << "All Members:" << endl;
        for (const auto& member : members) {
            cout << "ID: " << member.memberID << ", Name: " << member.name << ", Address: " << member.address 
                 << ", Phone: " << member.phoneNumber << endl;
        }
    }

    void borrowBook() {
        int memberID, bookID;
        cout << "Enter member ID: ";
        cin >> memberID;
        cout << "Enter book ID: ";
        cin >> bookID;
        auto memberIt = find_if(members.begin(), members.end(), [memberID](const Member& m) { return m.memberID == memberID; });
        auto bookIt = find_if(books.begin(), books.end(), [bookID](const Book& b) { return b.bookID == bookID; });
        if (memberIt != members.end() && bookIt != books.end() && bookIt->status) {
            transactionCounter++;
            string borrowDate = "2023-10-01"; // Example date, you can implement a date function
            transactions.emplace_back(transactionCounter , memberID, bookID, borrowDate);
            bookIt->status = false; // Mark book as borrowed
            saveBooks();
            saveTransactions();
            cout << "Book borrowed successfully!" << endl;
        } else {
            cout << "Member or book not found, or book is already borrowed!" << endl;
        }
    }

    void returnBook() {
        int transactionID;
        cout << "Enter transaction ID: ";
        cin >> transactionID;
        auto it = find_if(transactions.begin(), transactions.end(), [transactionID](const Transaction& t) { return t.transactionID == transactionID; });
        if (it != transactions.end()) {
            it->returnDate = "2023-10-10"; // Example return date
            auto bookIt = find_if(books.begin(), books.end(), [it](const Book& b) { return b.bookID == it->bookID; });
            if (bookIt != books.end()) {
                bookIt->status = true; // Mark book as available
            }
            saveBooks();
            saveTransactions();
            cout << "Book returned successfully!" << endl;
        } else {
            cout << "Transaction not found!" << endl;
        }
    }

    void searchBooks() {
        string searchTerm;
        cout << "Enter search term: ";
        cin.ignore();
        getline(cin, searchTerm);
        cout << "Search Results:" << endl;
        for (const auto& book : books) {
            if (book.title.find(searchTerm) != string::npos || book.author.find(searchTerm) != string::npos) {
                cout << "ID: " << book.bookID << ", Title: " << book.title << ", Author: " << book.author 
                     << ", Genre: " << book.genre << endl;
            }
        }
    }

    void searchMembers() {
        string searchTerm;
        cout << "Enter search term: ";
        cin.ignore();
        getline(cin, searchTerm);
        cout << "Search Results:" << endl;
        for (const auto& member : members) {
            if (member.name.find(searchTerm) != string::npos) {
                cout << "ID: " << member.memberID << ", Name: " << member.name << ", Address: " << member.address 
                     << ", Phone: " << member.phoneNumber << endl;
            }
        }
    }

    void viewAvailableBooks() {
        cout << "Available Books:" << endl;
        for (const auto& book : books) {
            if (book.status) {
                cout << "ID: " << book.bookID << ", Title: " << book.title << ", Author: " << book.author 
                     << ", Genre: " << book.genre << endl;
            }
        }
    }

    void viewBorrowedBooks() {
        cout << "Borrowed Books:" << endl;
        for (const auto& transaction : transactions) {
            if (transaction.returnDate.empty()) {
                auto bookIt = find_if(books.begin(), books.end(), [transaction](const Book& b) { return b.bookID == transaction.bookID; });
                auto memberIt = find_if(members.begin(), members.end(), [transaction](const Member& m) { return m.memberID == transaction.memberID; });
                if (bookIt != books.end() && memberIt != members.end()) {
                    cout << "ID: " << transaction.bookID << ", Title: " << bookIt->title << ", Author: " << bookIt->author 
                         << ", Borrowed by: " << memberIt->name << endl;
                }
            }
        }
    }

    void viewOverdueMembers() {
        cout << "Overdue Members:" << endl;
        for (const auto& transaction : transactions) {
            if (transaction.returnDate.empty()) {
                // Example logic for overdue check
                if (transaction.borrowDate < "2023-10-05") { // Assuming due date is 5 days after borrow date
                    auto memberIt = find_if(members.begin(), members.end(), [transaction](const Member& m) { return m.memberID == transaction.memberID; });
                    if (memberIt != members.end()) {
                        auto bookIt = find_if(books.begin(), books.end(), [transaction](const Book& b) { return b.bookID == transaction.bookID; });
                        cout << "ID: " << memberIt->memberID << ", Name: " << memberIt->name << ", Overdue Book: " 
                             << (bookIt != books.end() ? bookIt->title : "Unknown") << ", Due Date: 2023-10-05" << endl;
                    }
                }
            }
        }
    }

    void clearScreen() {
        system("CLS"); // For Windows
        // system("clear"); // For Unix-like systems
    }

    void displayMenu() {
        int choice;
        do {
            cout << "Library Management System" << endl;
            cout << "1. Add Book" << endl;
            cout << "2. Edit Book" << endl;
            cout << "3. Delete Book" << endl;
            cout << "4. View All Books" << endl;
            cout << "5. Add Member" << endl;
            cout << "6. Edit Member" << endl;
            cout << "7. Delete Member" << endl;
            cout << "8. View All Members" << endl;
            cout << "9. Borrow Book" << endl;
            cout << "10. Return Book" << endl;
            cout << "11. Search Books" << endl;
            cout << "12. Search Members" << endl;
            cout << "13. View Available Books" << endl;
            cout << "14. View Borrowed Books" << endl;
            cout << "15. View Overdue Members" << endl;
            cout << "16. Clear Screen" << endl;
            cout << "0. Exit" << endl;
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1: addBook(); break;
                case 2: editBook(); break;
                case 3: deleteBook(); break;
                case 4: viewAllBooks(); break;
                case 5: addMember(); break;
                case 6: editMember(); break;
                case 7: deleteMember(); break;
                case 8: viewAllMembers(); break;
                case 9: borrowBook(); break;
                case 10: returnBook(); break;
                case 11: searchBooks(); break;
                case 12: searchMembers(); break;
                case 13: viewAvailableBooks(); break;
                case 14: viewBorrowedBooks(); break;
                case 15: viewOverdueMembers(); break;
                case 16: clearScreen(); break;
                case 0: cout << "Exiting" << endl; break;
                default: cout << "Invalid choice! Please try again." << endl; break;
            }
        } while (choice != 0);
    }
};

int main() {
    LibraryManagementSystem lms;
    lms.displayMenu();
    return 0;
}
